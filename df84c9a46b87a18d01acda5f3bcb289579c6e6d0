{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dbc03f9a_a840859e",
        "filename": "src/serialization.c",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-06-29T10:50:13Z",
      "side": 1,
      "message": "(note) parse_uint32 already checks for event-\u003etype \u003d\u003d YAML_SCALAR_EVENT (in an assert)\n\n1/ asserts won\u0027t be compiled in release mode, I believe we might want to not use assert for things that come from user input as that can likely lead to weird behaviour (it\u0027s impressive what stuff you see in exploits....)\n\n2/ I see patterns similar to parse_next_uint32 in quite a ton of places: pretty much all parse_uint32 in this file are prefixed by a if (!yaml_parser_parse(\u0026event, minor)) parser_error(parser), that could also probably use some refactoring... laterâ„¢\nThere is actually only one case that doesn\u0027t apply, bit of a shame!",
      "revId": "df84c9a46b87a18d01acda5f3bcb289579c6e6d0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5722098b_696362d6",
        "filename": "src/serialization.c",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-30T21:23:44Z",
      "side": 1,
      "message": "\u003e asserts won\u0027t be compiled in release mode, I believe we might want to not use assert for things that come from user input\n\nI\u0027m pretty sure I only use assert to catch programming errors, meaning there is an assert there to catch that I indeed checked the type earlier, but I don\u0027t rely on it. It\u0027s just a trip wire.\n\n\u003e pretty much all parse_uint32 in this file are prefixed by a if (!yaml_parser_parse(\u0026event, minor)) parser_error(parser)\n\nYes, that\u0027s the point, right?\n\n\u003e that could also probably use some refactoring... laterâ„¢\n\nWait, what do you want to refactor? (I\u0027m not opposed to anything, I just don\u0027t understand)\n\n\u003e There is actually only one case that doesn\u0027t apply, bit of a shame!\n\nðŸ˜® Where?!",
      "parentUuid": "dbc03f9a_a840859e",
      "revId": "df84c9a46b87a18d01acda5f3bcb289579c6e6d0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "090f612c_febf7ef0",
        "filename": "src/serialization.c",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-07-01T11:45:50Z",
      "side": 1,
      "message": "splitting reply as there\u0027s two different topics here -- assert discussion on its own comment.\n\n\u003e\u003e parse_uint32 almost always being prefixed by yaml_parser_parse()\n\u003e\n\u003e Yes, that\u0027s the point, right?\n\nI think I wasn\u0027t clear in what I wanted :)\nExamples that could replace yaml_parser_parse + parse_int32 by parse_next_uint32:\n - STF_NEXT parsing,\n - DNF_MAJOR, DNF_MINOR parsing",
      "parentUuid": "5722098b_696362d6",
      "revId": "df84c9a46b87a18d01acda5f3bcb289579c6e6d0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "897a3e6b_a31d4f95",
        "filename": "src/serialization.c",
        "patchSetId": 4
      },
      "lineNbr": 253,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-01T23:01:27Z",
      "side": 1,
      "message": "OK, thanks, I put that in the todolist as well.",
      "parentUuid": "090f612c_febf7ef0",
      "revId": "df84c9a46b87a18d01acda5f3bcb289579c6e6d0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07a8f59c_ea81cb37",
        "filename": "src/serialization.c",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-07-01T11:45:50Z",
      "side": 1,
      "message": "Are these asserts not based on input?\nI know my early fuzzing hit a few assert failures like that (6-7), can dig these out if required.",
      "revId": "df84c9a46b87a18d01acda5f3bcb289579c6e6d0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b30a1b8_b9f53078",
        "filename": "src/serialization.c",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-07-01T23:01:27Z",
      "side": 1,
      "message": "That\u0027s my bad, I realized this after writing this comment and wrote so in another review but I didn\u0027t want to go through the whole series to find just this patch, sorry.\n\nYou are right, and I put this in my todolist. Thanks!",
      "parentUuid": "07a8f59c_ea81cb37",
      "revId": "df84c9a46b87a18d01acda5f3bcb289579c6e6d0",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}
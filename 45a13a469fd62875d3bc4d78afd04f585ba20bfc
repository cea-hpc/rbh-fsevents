{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c14215ad_db79617d",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-06-27T22:00:00Z",
      "side": 1,
      "message": "that\u0027s just me not knowing how libyaml/miniyaml work so just asking: yaml_parser_parse will stop at the first token, and the fsevent stream of yaml will be formatted such as each fsevent is prefixed by its type and followed by an end of event token; while in the grand scheme of things you\u0027ll also get an end event token for EOF (with corresponding start having been in yaml_fsevent_init) ?\n\nI don\u0027t get what fills in fsevent-\u003efsevent.type before parse_fsevent() just below.",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5819c700_1f62905f",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-27T23:27:23Z",
      "side": 1,
      "message": "I\u0027m not able to find a better reference for this, so I can only direct you to the source code of libyaml [0]. YAML was designed to be stream-able and can be serialized/deserialized into a series of events. Some of those are visually represented in the text format, others are generated by the parser:\n\n           # \u003c-- STREAM-START            (implicit)\n---        # \u003c-- DOCUMENT-START          (can be omitted in some situations)\nkey: value # \u003c-- MAPPING-START / SCALAR / SCALAR / MAPPING-END\n...        # \u003c-- DOCUMENT-END            (can be omitted in some situations)\n           # \u003c-- STREAM-END              (implicit)\n\nPeople tend to use YAML as a \"human-friendly\" version of JSON that supports comments, which I find very sad. Fsevents make use of at least two features of YAML that could use a bit more publicity:\n- documents\n- tags\n\nEach fsevent is a separate document. Each of those documents is tagged so I can deduce from the first YAML-event which type of fsevent I am about to parse: very useful to get an LL(1) parser (a parser which only has to look at the next event to know how to interpret it, ie. no back and forth).\n\n\u003e yaml_parser_parse will stop at the first token\n\nIt will stop at the first *event*, but tomato-potato.\n\n\u003e the fsevent stream of yaml will be formatted such as each fsevent is prefixed by its type\n\nYes\n\n\u003e and followed by an end of event token\n\nEnd of document, but yes.\n\n\u003e while in the grand scheme of things you\u0027ll also get an end event token for EOF\n\nYes, that will be the STREAM-END event.\n\n\u003e (with corresponding start having been in yaml_fsevent_init)\n\nExactly üëç\n\n[0] https://github.com/yaml/libyaml/blob/acd6f6f014c25e46363e718381e0b35205df2d83/include/yaml.h#L355",
      "parentUuid": "c14215ad_db79617d",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6e28cfc_31c6ab55",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-27T23:37:11Z",
      "side": 1,
      "message": "Woops forgot to answer the main question.\n\n\u003e I don\u0027t get what fills in fsevent-\u003efsevent.type before parse_fsevent() just below.\n\nSorry, it\u0027s really just a messed up piece of code. But I believe it\u0027s correct.\n\nIt has nothing to do with the fsevent we are about to parse: it\u0027s all about the fsevent we parsed just before that. The idea is I only need to reset the fields that might have previously been set, disregarding whether the next fsevent is going to need them or not.\n\nIncidentally, this is also why I have to write `fsevent.type \u003d 0` in yaml_fsevent_init() (to avoid an unitialized memory access).\n\nI guess it deserves at least a comment... Ideally better code... That\u0027s a problem for tomorrow-me.",
      "parentUuid": "5819c700_1f62905f",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f7d2997_4eec230d",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-06-27T22:00:00Z",
      "side": 1,
      "message": "(nitpick) would it be simpler to name the union and memset it to zero unconditionally?\nI guess it doesn\u0027t apply to RBH_FET_DELETE...",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcf473f9_84b08f40",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-27T23:27:23Z",
      "side": 1,
      "message": "I have no idea what the performance implications of memset-ing vs. assigning fields in a union are, but I usually try to only write to memory when I have to.\n\nAnd you are right, that would be (a tiny little bit) wasteful for RBH_FET_DELETE. Then again, does a conditional cost more or less than zero-ing two pointers? I have no idea.",
      "parentUuid": "4f7d2997_4eec230d",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aa44050_92d65b84",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-06-27T22:00:00Z",
      "side": 1,
      "message": "(nitpick) unexpected yaml format/yaml type rather than fsevent type? (fsevent type \u003d upsert/link/etc for me, even if yaml event types are also called type)",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "493c506e_1232d1d1",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-27T23:27:23Z",
      "side": 1,
      "message": "Yep, you\u0027re right. (also, the trailing newline is redundant)",
      "parentUuid": "0aa44050_92d65b84",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21af3a54_f024d484",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1003556
      },
      "writtenOn": "2021-06-27T22:00:00Z",
      "side": 1,
      "message": "(nitpick, future improvement) I feel this could really use a magic first byte of the struct checked in debug mode, or at least for tests (e.g. assert)",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fc90654_ac61a8b1",
        "filename": "src/sources/file.c",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1018755
      },
      "writtenOn": "2021-06-27T23:27:23Z",
      "side": 1,
      "message": "It bit me when I tried to reorder the fields or `struct source` to have `name` come before `fsevents`.\n\nBut beyond that, how would one end up here with something other than a file_source iterator?",
      "parentUuid": "21af3a54_f024d484",
      "revId": "45a13a469fd62875d3bc4d78afd04f585ba20bfc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}
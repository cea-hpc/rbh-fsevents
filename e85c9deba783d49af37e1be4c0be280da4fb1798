{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "abc8b7e0_27f85186",
        "filename": "include/enricher.h",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2023-04-14T12:53:12Z",
      "side": 1,
      "message": "suggest: this will build iterators given an fsevent iterator. It could be name enrich_iterator_builder",
      "range": {
        "startLine": 16,
        "startChar": 7,
        "endLine": 16,
        "endChar": 13
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f37a770_707d7b2e",
        "filename": "include/enricher.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2023-04-14T12:53:12Z",
      "side": 1,
      "message": "suggest: as far as I understand, this function will wrap the fsevents iterator inside another iterator that will enrich the entry. I find the function name \"enrich_process\" misleading. To me it implies that this function will actually process the fsevent but in reality, it will only create an iterator. You could rename it: enrich_iterator_from_fsevents for example. At the same time, the callback \"process\" of the enrich_operations structure could be named build_enrich_iterator for example.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 14
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a5ab1fc_3f4eafd4",
        "filename": "rbh-fsevents.c",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2023-04-14T11:39:17Z",
      "side": 1,
      "message": "major: this is already done by rbh_backend_from_uri",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 185,
        "endChar": 68
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac2658c1_a6a3298c",
        "filename": "rbh-fsevents.c",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2023-04-14T12:03:56Z",
      "side": 1,
      "message": "The goal here is to retrieve the last part of the URI, part we can not retrieve from the backend without specifying it, and I do not think we want that.",
      "parentUuid": "7a5ab1fc_3f4eafd4",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 185,
        "endChar": 68
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "251374df_339d11b8",
        "filename": "rbh-fsevents.c",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2023-04-14T11:39:17Z",
      "side": 1,
      "message": "suggest: uri",
      "range": {
        "startLine": 196,
        "startChar": 23,
        "endLine": 196,
        "endChar": 26
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "779c6b8d_353ac80d",
        "filename": "rbh-fsevents.c",
        "patchSetId": 2
      },
      "lineNbr": 196,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2023-04-14T12:03:56Z",
      "side": 1,
      "message": "Yeah, we can suppose we will only have a URI.",
      "parentUuid": "251374df_339d11b8",
      "range": {
        "startLine": 196,
        "startChar": 23,
        "endLine": 196,
        "endChar": 26
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7033b001_8e82b387",
        "filename": "rbh-fsevents.c",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2023-04-14T11:39:17Z",
      "side": 1,
      "message": "question: why not simply let rbh_backend_from_uri fail instead of parsing the URI 3 times? My understanding of rbh_backend_from_uri is that it will return NULL only if the URI is invalid so you could do somehing like this:\n\n```\nstruct enrich *enrich \u003d enrich_from_uri(arg);\n\nif (!enrich)\n    error(...);\n    \nreturn enrich;\n```\n\nThis would only parse the URI once and have the same behavior I think.",
      "range": {
        "startLine": 198,
        "startChar": 8,
        "endLine": 198,
        "endChar": 14
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49f22c31_dc83669e",
        "filename": "rbh-fsevents.c",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2023-04-14T12:03:56Z",
      "side": 1,
      "message": "We can avoid the `is_uri()` if we are sure we will only have a URI as a mountpoint, which I agree.",
      "parentUuid": "7033b001_8e82b387",
      "range": {
        "startLine": 198,
        "startChar": 8,
        "endLine": 198,
        "endChar": 14
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "608c5bb7_4f001c96",
        "filename": "rbh-fsevents.c",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2023-04-14T11:39:17Z",
      "side": 1,
      "message": "suggest: you can avoid the builtin like this:\n\n```\nif (!is_uri(arg))\n    error(...);\n    \nreturn enrich_from_uri(arg);\n```",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 202,
        "endChar": 28
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4b9f192_b2f010a1",
        "filename": "rbh-fsevents.c",
        "patchSetId": 2
      },
      "lineNbr": 202,
      "author": {
        "id": 1017196
      },
      "writtenOn": "2023-04-14T12:03:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "608c5bb7_4f001c96",
      "range": {
        "startLine": 201,
        "startChar": 4,
        "endLine": 202,
        "endChar": 28
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd633516_eb8079ff",
        "filename": "src/enricher.c",
        "patchSetId": 2
      },
      "lineNbr": 892,
      "author": {
        "id": 1019142
      },
      "writtenOn": "2023-04-14T12:53:12Z",
      "side": 1,
      "message": "question: I feel like this structure only adds complexity to the code without solving an actual issue. Is there a reason why backend is not in enrich and mount_fd either in enrich for now since both lustre and posix need it or in each backend specific enrich?\n\nI think you could have the enrich struct and the backend specific ones only.",
      "range": {
        "startLine": 892,
        "startChar": 4,
        "endLine": 892,
        "endChar": 32
      },
      "revId": "e85c9deba783d49af37e1be4c0be280da4fb1798",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}